#! /usr/bin/perl

# Copyright (C) 2015 Stephan Kulow <coolo@suse.com>

# This program is free software; you can redistribute it
# and/or modify it under the same terms as Perl itself.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

use strict;
use warnings;
use XML::Simple;
use Data::Dumper;
use Compress::Zlib;
use version;
use List::Util;

require CPAN::Meta::Requirements;
use File::Temp qw/tempdir/;

open(my $statusfh, "curl -s https://build.opensuse.org/status/project/devel:languages:perl|");
my $xml = XMLin($statusfh)->{package};
close($statusfh);

my $modpath = glob("~/.cpan/sources/modules");
my $details = "02packages.details.txt.gz";
chdir($modpath) || die "call cpan once to create $modpath";
system("wget -qm -nd http://www.cpan.org/modules/$details");

my %upstream;
open(DETAILS, "zcat $modpath/$details|");
while ( <DETAILS> ) {
    chomp;
    if (m!^(\S+)\s+([\w\.]+)\s+(\S*)!m) {
	eval { $upstream{$1} = [version->parse($2), $3]; }
    }
}
close(DETAILS);

my $tocreate = 10;

my @pkgs = List::Util::shuffle(keys %$xml);
#@pkgs = sort keys %$xml;
my %tobuild;
while ( (@pkgs && $tocreate) || %tobuild ) {
    if (%tobuild) {
	my $url = "https://build.opensuse.org/build/devel:languages:perl:autoupdate/_result?";
	my @tocheck = sort keys %tobuild;
	$url .= "package=" . shift @tocheck;
	$url .= "&package=$_" for (@tocheck);
	print "checking '$url'\n";
	open(my $fh, "curl -s '$url'|");
	my $res = XMLin($fh, forcearray => [ qw/status/ ]);
	#print Dumper($res);
	close($fh);

	if ($res && $res->{result}->{status}) {
	    for my $status (@{$res->{result}->{status}}) {
		my $code = $status->{code} || 'unscheduled';
		if ($code && $code eq 'finished') {
		    $code = $status->{details} || 'unknown';
		}
		my $built = $status->{package};
		print "CODE $built $code\n";
		if ($code eq 'succeeded') {
		    system("osc sr -m 'automatic update' devel:languages:perl:autoupdate $built devel:languages:perl --clean < /dev/null");
		    delete $tobuild{$built};
		}
		if ($code eq 'failed' || $code eq 'unresolvable' || $code eq 'broken') {
		    delete $tobuild{$built};
		}
	    }
	}
    }
    if ($tocreate && @pkgs) {
	my $pkg = shift @pkgs;
	next unless $pkg =~ m,^perl-,;
	my $ups = $pkg;
	$ups =~ s,^perl-,,;
	$ups =~ s,-,::,g;
	next unless  defined($upstream{$ups}[0]);
	my $obs_version;
	eval { $obs_version = version->parse($xml->{$pkg}->{version}); };
	next unless $obs_version;
	my $older = $obs_version < $upstream{$ups}[0];
	next unless $older;
	print "PKG $pkg " . $obs_version . " $ups " . $upstream{$ups}[0] . " " . ($older ? 'OLDER' : 'NEWER') .  "\n";
	my $tempdir = tempdir; # ( CLEANUP => 1 );
	chdir($tempdir);

	# exit(0) means it exists, so skip it
	#system("osc api /source/devel:languages:perl:autoupdate/$pkg > /dev/null") || next;

	system("osc rdelete -mfresh -f devel:languages:perl:autoupdate $pkg");
	system("osc branch -c -f devel:languages:perl $pkg devel:languages:perl:autoupdate") == 0
	  or next;
	$tocreate--;
	chdir("devel:languages:perl:autoupdate/$pkg") || die "can't chdir";
	for my $tar (glob("*.tar*")) {
	    unlink($tar);
	}
	system("wget -q ftp://cpan.mirror.iphh.net/pub/CPAN/authors/id/$upstream{$ups}[1]");
	#print "~coolo/prod/cpanspec/cpanspec -f --old-file .osc/*.tar* *.tar*\n";
	system("~coolo/prod/cpanspec/cpanspec -f --old-file .osc/*.tar* *.tar*") == 0
	  or next;
	system("osc addremove") == 0
	  or next;
	system("osc ci -mupdate") == 0
	  or next;
	$tobuild{$pkg} = 1;
	print "SHELL $tempdir\n";
	chdir("/tmp");
    } else {
	sleep(5);
    }
    #exit(1);
    #exit(1) if ($requests++ > 5);
}
